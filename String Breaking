//Introduction to Algorithms Third Edition by Cormen et alt
//15-9 Breaking a string
//A certain string-processing language allows a programmer to break a string into two pieces. 
//Because this operation copies the string, it costs n time units to break a string of n characters into two pieces. 
//Suppose a programmer wants to break a string into many pieces. The order in which the breaks occur can affect the 
//total amount of time used. For example, suppose that the programmer wants to break a 20-character string after 
//characters 2, 8, and 10 (numbering the characters in ascending order from the left-hand end, starting from 1). If 
//she programs the breaks to occur in left-to-right order, then the first break costs 20 time units, the second break
//costs 18 time units (breaking the string from characters 3 to 20 at character 8), and the third break costs 12 time
//units, totaling 50 time units. If she programs the breaks to occur in right-to-left order, however, then the first 
//break costs 20 time units, the second break costs 10 time units, and the third break costs 8 time units, totaling 38
//time units. In yet another order, she could break first at 8 (costing 20), then break the left piece at 2 (costing 8),
//and finally the right piece at 10 (costing 12), for a total cost of 40.
//Design an algorithm that, given the numbers of characters after which to break, determines a least-cost way to sequence
//those breaks. More formally, given a string S with n characters and an array LŒ1 : : m􏰀 containing the break points, 
//com- pute the lowest cost for a sequence of breaks, along with a sequence of breaks that achieves this cost.
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

ostream & operator<< (ostream & cout, vector<int> sequence) {
    for (int i: sequence) {
        cout << i << " ";
    }
    cout << endl;
    return cout;
}

class StringBreaking {
    public:
        static vector<int> determineMinStringBreakingSequence(string& str, vector<int> sequence, bool sorted) {
            if(str.size() < sequence.size()) return vector<int>();
            if(!sorted) sort(sequence.begin(), sequence.end());
            vector<int> result;
            while(sequence.size() != 0){
                if(sequence.size() == 1) {
                    result.insert(result.begin(), sequence.at(0));
                    break;
                }
                int minMergeCost =  2147483647;
                int index = 0;
                for(int i = 0; i < sequence.size() - 2; i++) {
                    int mergeCost = sequence.at(i+2) - sequence.at(i);
                    if(mergeCost < minMergeCost) {
                        index = i + 1;
                        minMergeCost = mergeCost;
                    }
                }
                if(sequence.at(1) < minMergeCost) {
                    minMergeCost = sequence.at(1);
                    index = 0;
                }
                int cost = str.size() - 1 - sequence.at(sequence.size() - 2);
                if(cost < minMergeCost) {
                    index = sequence.size() - 1;
                }
                result.insert(result.begin(), sequence.at(index));
                sequence.erase(sequence.begin() + index);
            }
            return result;
        }
};
int main(){
    vector<int> sequence = {15,16,17,18};
    string str = "111111111111111111";
    cout << StringBreaking::determineMinStringBreakingSequence(str, sequence, false);
}
