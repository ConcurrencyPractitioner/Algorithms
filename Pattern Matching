//16.18 Pattern Matching Cracking the Coding Interview 3rd Edition
#include <iostream>
#include <string>
#include <vector>
#include <list>

using namespace std;

ostream & operator<<(ostream & fout, vector<int>& indexes){
    for(int i: indexes){
        fout << i << " ";
    }
    fout << endl;
    return fout;
}
class PatternMatching{
    public:
        string pattern;
        string value;
        int firstCharAppearences = 0;
        int secondCharAppearences = 0;
        int secondCharFirstOccurrence = 0;
        PatternMatching(string p, string v):pattern(p), value(v){}
        vector<int> rabin_karp_string_search(string& input){
            vector<int> result;
            string currString = "";
            int runningIndex = -1;
            for(int i = 0; i < value.size(); i++){
                currString += value.at(i);
                runningIndex++;
                if(currString == input){
                    result.emplace_back(i - currString.size() + 1);
                    currString = "";
                    runningIndex = -1;
                }else if(currString.at(runningIndex) != input.at(runningIndex)){
                    currString = "";
                    runningIndex = -1;
                }
            }
            return result;
        }
        bool assertMatch(string& firstCharString, char first, char second){
            vector<int> locations = rabin_karp_string_search(firstCharString);
            if(locations.size() != firstCharAppearences) return false;
            string secondCharString = "";
            for(int i = locations.at(secondCharFirstOccurrence - 1) + firstCharString.size();
                i < locations.at(secondCharFirstOccurrence); i++){
                secondCharString += value.at(i);
            }
            string currString = "";
            for(int i = 0; i < pattern.size(); i++){
                currString += pattern.at(i) == first ? firstCharString : secondCharString;
            }
            if(currString == value) return true;
            return false;
        }
        bool valueMatchesPattern(){
            if(value.size() == 0) return true;
            char firstChar = pattern.at(0);
            char secondChar = ' ';
            for(int i = 0; i < pattern.length(); i++){
                if(pattern.at(i) != firstChar && secondChar == ' '){
                    secondChar = pattern.at(i);
                    secondCharFirstOccurrence = i;
                }
                if(pattern.at(i) == firstChar) firstCharAppearences++;
                else if(pattern.at(i) == secondChar) secondCharAppearences++;
            }
            string firstCharString = "";
            for(int i = 0; i < value.length(); i++){
                firstCharString += value.at(i);
                if(assertMatch(firstCharString, firstChar, secondChar)) return true;
            }
            return false;
        }
};
int main(){
    PatternMatching pMatching = PatternMatching("aabab","catcatgocatgo");
    bool match = pMatching.valueMatchesPattern();
    cout << match << endl;
}
